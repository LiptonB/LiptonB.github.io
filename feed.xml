<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>bl stash save</title><link href="http://blog.benjaminlipton.com/" rel="alternate"></link><link href="http://blog.benjaminlipton.com/feed.xml" rel="self"></link><id>http://blog.benjaminlipton.com/</id><updated>2016-09-01T00:00:00-04:00</updated><entry><title>"Thinking about templating, part 2: Handling missing data"</title><link href="http://blog.benjaminlipton.com/2016/09/01/rule-suppression.html" rel="alternate"></link><published>2016-09-01T00:00:00-04:00</published><updated>2016-09-01T00:00:00-04:00</updated><author><name>Benjamin Lipton</name></author><id>tag:blog.benjaminlipton.com,2016-09-01:2016/09/01/rule-suppression.html</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#simple-approach-data-rules-only"&gt;Simple approach: data rules only&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#current-solution-see-if-something-renders"&gt;Current solution: See if something renders&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#issues"&gt;Issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#alternative-declare-data-dependencies"&gt;Alternative: Declare data dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#suppressing-excess-commas-and-newlines"&gt;Suppressing excess commas and newlines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusions"&gt;Conclusions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#appendix"&gt;Appendix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This post is a followup to
&lt;a href="{% post_url 2016-07-19-csr-generation-templating %}"&gt;Thinking about templating for automatic CSR generation&lt;/a&gt;.
In it we will look at a requirement of the templating system that was not
discussed in that post, and see how it is handled by the implementation.&lt;/p&gt;
&lt;p&gt;Sometimes you might want to generate a certificate for a principal that doesn't
have all the fields referenced in the profile. This could be due to an error
(e.g.  used the "user" profile for a "service" principal) or just the way the
data is (e.g. the principal has no email address, or the requesting user has no
access to that field). We want to handle this cleanly by omitting the sections
of config that have missing data.&lt;/p&gt;
&lt;h2 id="simple-approach-data-rules-only"&gt;Simple approach: data rules only&lt;/h2&gt;
&lt;p&gt;We can pretty simply update our data rules to do this partly right, like in
this example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;subject.fqdn.0&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;DNS = &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;subject.fqdn.0&lt;/span&gt;&lt;span class="cp"&gt;}}{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This adds some extra work for administrators creating new rules, and is another
step that someone could forget, but could be manageble.&lt;/p&gt;
&lt;p&gt;However, if &lt;em&gt;none&lt;/em&gt; of the data rules for a field has any data, we need to avoid
rendering the syntax rule for that field as well, otherwise we get weird empty
sections that openssl doesn't like. Modifying the rule templates can't solve
this problem, because the syntax rule intentionally doesn't know what data it
may depend on for different profiles; that all depends on the data rules.&lt;/p&gt;
&lt;h2 id="current-solution-see-if-something-renders"&gt;Current solution: See if something renders&lt;/h2&gt;
&lt;p&gt;One way to make this work is to build syntax rules so they use jinja2 control
tags to compute the output of any data rules first, then render their own text
only if some data rule rendered successfully. In its raw form, this gets ugly
(see [1] for explanation):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;raw&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;{% set contents %}&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endraw&lt;/span&gt; &lt;span class="cp"&gt;%}{{&lt;/span&gt; &lt;span class="nv"&gt;datarules&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;raw&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;{% endset %}{% if contents %}&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endraw&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;subjectAltName = @&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="nv"&gt;openssl.section&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;%}{%&lt;/span&gt; &lt;span class="k"&gt;raw&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;{{ contents }}
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endraw&lt;/span&gt; &lt;span class="cp"&gt;%}{%&lt;/span&gt; &lt;span class="k"&gt;endcall&lt;/span&gt; &lt;span class="cp"&gt;%}{%&lt;/span&gt; &lt;span class="k"&gt;raw&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;{% endif %}&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endraw&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For comparison, that rule used to look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;subjectAltName = @&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="nv"&gt;openssl.section&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;datarules&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}{%&lt;/span&gt; &lt;span class="k"&gt;endcall&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I think this might be a heavy burden for administrators who want to write new
syntax rules.&lt;/p&gt;
&lt;p&gt;However, we can introduce some macros to make this better. One macro,
&lt;code&gt;syntaxrule&lt;/code&gt;, computes the result of rendering the data rules it contains, but
does not output these results unless a flag is set to true. That flag is
controlled by another macro, &lt;code&gt;datarule&lt;/code&gt;, which updates the flag to true when
the enclosed data rule renders successfully. We can apply a similar technique
to the fields in the data rules, rendering the rule only if all fields are
present.&lt;/p&gt;
&lt;p&gt;Now, the framework can automatically wrap all syntax rules in
&lt;code&gt;{% call ipa.syntaxrule() %}...{% endcall %}&lt;/code&gt; and all data
rules in &lt;code&gt;{% call ipa.datarule() %}...{% endcall %}&lt;/code&gt;.
Writers of data rules must wrap all field references in &lt;code&gt;ipa.datafield()&lt;/code&gt; to
mark values that could be missing, such as
&lt;code&gt;{{ ipa.datafield(subject.mail.0) }}&lt;/code&gt;,
but no other modifications to the rules are necessary.&lt;/p&gt;
&lt;p&gt;This is the way rule suppression is currently implemented.&lt;/p&gt;
&lt;h3 id="issues"&gt;Issues&lt;/h3&gt;
&lt;p&gt;This system seems to be working fairly well, but it has a few drawbacks.&lt;/p&gt;
&lt;p&gt;First, the macros to do this are a little arcane, as can be seen in [2], and
can't be commented very well because any whitespace becomes part of the macro
output.  They rely on global variables within the template, but this should be
ok as long as we always nest datafields within datarules within syntaxrules,
and never nest more than once.&lt;/p&gt;
&lt;p&gt;Second, syntax rules with multiple assigned data rules present a problem.
Generally we will want the results of those rules to be presented in the output
with some character in between, e.g.
&lt;code&gt;{{datarules|join(',')}}&lt;/code&gt; for certutil. However, when we
finally render this template with data, what if one of our datarules renders
while another does not due to lack of data? The above rule segment would
produce a template like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="nv"&gt;ipa.datarule&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;email:&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;ipa.datafield&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;subject.mail.0&lt;/span&gt;&lt;span class="o"&gt;)|&lt;/span&gt;&lt;span class="nf"&gt;quote&lt;/span&gt;&lt;span class="cp"&gt;}}{%&lt;/span&gt; &lt;span class="k"&gt;endcall&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="nv"&gt;ipa.datarule&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;uri:&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;ipa.datafield&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;subject.inetuserhttpurl.0&lt;/span&gt;&lt;span class="o"&gt;)|&lt;/span&gt;&lt;span class="nf"&gt;quote&lt;/span&gt;&lt;span class="cp"&gt;}}{%&lt;/span&gt; &lt;span class="k"&gt;endcall&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If this subject has no &lt;code&gt;inetuserhttpurl&lt;/code&gt; field, the second &lt;code&gt;ipa.datarule&lt;/code&gt; will
be suppressed, leaving an empty string. But, the comma will still be there!
This creates odd-looking output like the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--extSAN email:myuser@example.com,
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Fortunately, certutil seems not to mind these extra commas, and openssl is also
ok with the extra blank lines that arise the same way, so this isn't breaking
anything right now. But, it's worrying not to be able to do much to improve
this formatting.&lt;/p&gt;
&lt;p&gt;Third, there is an unfortunate interaction between the macros created for this
technique, the above issue, and the macro that produces openssl sections. That
macro [3] also relies on side effects to do its job - the contents of the
section are appended to a global list of sections, while only the section name
is returned at the point where the macro is called. Since the technique
discussed in this section evaluates each data rule to see if it produces any
data, if the rule includes an openssl section, a section is stored on rule
evaluation even if it has no data. Again, openssl is ok with the extra sections
as long as they are not referenced within the config file, but the result is
ugly.&lt;/p&gt;
&lt;h2 id="alternative-declare-data-dependencies"&gt;Alternative: Declare data dependencies&lt;/h2&gt;
&lt;p&gt;Another approach to suppressing syntax rules when none of their data rules are
going to render is to take the "simple approach" of listing the required data
items in an &lt;code&gt;{% if %}&lt;/code&gt; statement one step further. We
could amend the schema for data rules to include a record of the included data
item, so that each rule would know its dependencies. Data rules could then be
automatically wrapped so they wouldn't be rendered if this item was
unavailable. Syntax rules could be treated similarly; by querying the
dependencies of all the data rules it was configured to include, the whole
syntax rule could be suppressed if none of those items were available.&lt;/p&gt;
&lt;p&gt;In this scheme, the template produced would look like (linebreaks and
indentation added):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;subject.mail.0&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="nv"&gt;subject.inethttpurl.0&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;--extSAN&lt;/span&gt;
&lt;span class="x"&gt;  &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;subject.mail.0&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;email:&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;subject.mail.0&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;quote&lt;/span&gt;&lt;span class="cp"&gt;}}{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt;
&lt;span class="x"&gt;  &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;subject.inethttpurl.0&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;uri:&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;subject.inethttpurl.0&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;quote&lt;/span&gt;&lt;span class="cp"&gt;}}{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This takes care of the third problem of the previous solution, because data
rules with missing data will never be evaluated, meaning that superfluous
openssl sections will not be added. However, the second problem still persists,
because the commas and newlines are part of the syntax rule (which is rendered)
not the data rules (some of which aren't rendered).&lt;/p&gt;
&lt;h2 id="suppressing-excess-commas-and-newlines"&gt;Suppressing excess commas and newlines&lt;/h2&gt;
&lt;p&gt;The challenge with preventing these extra commas and newlines is that they must
be evaluated during the final render, when the subject data is available, not
when the syntax rules are evaluated to build the final template. Using the
&lt;code&gt;join&lt;/code&gt; filter in the syntax rule is insufficient, because it is evaluated
before that data is available. What we really want is to pass the &lt;em&gt;output&lt;/em&gt; of
all the data rules to the join filter, &lt;em&gt;at final render time&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This is not a polished solution, but an image of what this could look like is
for the data rule to be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;--extSAN &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;datarules&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;filternonempty&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;join(&amp;#39;,&amp;#39;)&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which would create a final template like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;filternonempty&lt;/span&gt; &lt;span class="nv"&gt;join&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;data rule 1&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;filterpart&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;data rule 2&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfilternonempty&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And the &lt;code&gt;filternonempty&lt;/code&gt; tag would be implemented so the effect of this would
be approximately:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;parts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;part&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;data rule 1&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endset&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;part&lt;/span&gt; &lt;span class="cp"&gt;%}{%&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nv"&gt;parts.append&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;part&lt;/span&gt; &lt;span class="cp"&gt;%}{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;part&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;data rule 2&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endset&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;part&lt;/span&gt; &lt;span class="cp"&gt;%}{%&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nv"&gt;parts.append&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;part&lt;/span&gt; &lt;span class="cp"&gt;%}{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;parts&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I think this is doable, but I don't have a prototype yet.&lt;/p&gt;
&lt;h2 id="conclusions"&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;The current implementation is working ok, but the "Declaring data dependencies"
solution is also appealing. Recording in data rules what data they depend on is
only slightly more involved than wrapping that reference in &lt;code&gt;ipa.datafield()&lt;/code&gt;,
and could also be useful for other purposes. Plus, it would get rid of the
empty sections in openssl configs, as well as some of the complex macros.&lt;/p&gt;
&lt;p&gt;The extra templating and new tags required to get rid of extra commas and
newlines don't seem worth it to me, unless we discover a version of openssl or
certutil that can't consume the current output.&lt;/p&gt;
&lt;p&gt;Finally, I think the number of hoops needing to be jumped through to fine-tune
the output format hint at this "template interpolation" approach being less
successful than originally expected. While it was expected that inserting data
rule templates into syntax rule templates and rendering the whole thing would
produce similar results to rendering data rules first and inserting the output
into syntax rules, that is not turning out to be the case. It might be wise to
reconsider the simpler option - it may be easier to implement reliable jinja2
template markup escaping than to build templates smart enough to handle any
combination of data that's available.&lt;/p&gt;
&lt;h2 id="appendix"&gt;Appendix&lt;/h2&gt;
&lt;p&gt;[1] In case you're having trouble parsing this mess, when rendered to insert
data rules, and with whitespace added for readability, it turns into this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;contents&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;subject.mail.0&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;email = &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;subject.mail.0&lt;/span&gt;&lt;span class="cp"&gt;}}{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt; &amp;lt;-- this is the data rule&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endset&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;contents&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    subjectAltName = @&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="nv"&gt;openssl.section&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;%}{{&lt;/span&gt; &lt;span class="nv"&gt;contents&lt;/span&gt; &lt;span class="cp"&gt;}}{%&lt;/span&gt; &lt;span class="k"&gt;endcall&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;[2]&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;rendersyntax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;renderdata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;

&lt;span class="c"&gt;{# Wrapper for syntax rules. We render the contents of the rule into a&lt;/span&gt;
&lt;span class="c"&gt;variable, so that if we find that none of the contained data rules rendered we&lt;/span&gt;
&lt;span class="c"&gt;can suppress the whole syntax rule. That is, a syntax rule is rendered either&lt;/span&gt;
&lt;span class="c"&gt;if no data rules are specified (unusual) or if at least one of the data rules&lt;/span&gt;
&lt;span class="c"&gt;rendered successfully. #}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;macro&lt;/span&gt; &lt;span class="nv"&gt;syntaxrule&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nv"&gt;rendersyntax.update&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;none&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;any&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;contents&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;caller&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; -&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endset&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;rendersyntax&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;none&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="nv"&gt;rendersyntax&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;any&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;contents&lt;/span&gt; -&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endmacro&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;

&lt;span class="c"&gt;{# Wrapper for data rules. A data rule is rendered only when all of the data&lt;/span&gt;
&lt;span class="c"&gt;fields it contains have data available. #}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;macro&lt;/span&gt; &lt;span class="nv"&gt;datarule&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nv"&gt;rendersyntax.update&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;none&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nv"&gt;renderdata.update&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;all&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;contents&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;caller&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; -&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endset&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;renderdata&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;all&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nv"&gt;rendersyntax.update&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;any&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;contents&lt;/span&gt; -&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endmacro&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;

&lt;span class="c"&gt;{# Wrapper for fields in data rules. If any value wrapped by this macro&lt;/span&gt;
&lt;span class="c"&gt;produces an empty string, the entire data rule will be suppressed. #}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;macro&lt;/span&gt; &lt;span class="nv"&gt;datafield&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt; -&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nv"&gt;renderdata.update&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;all&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endmacro&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;[3]&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;{# List containing rendered sections to be included at end #}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;openssl_sections&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;

&lt;span class="c"&gt;{#&lt;/span&gt;
&lt;span class="c"&gt;List containing one entry for each section name allocated. Because of&lt;/span&gt;
&lt;span class="c"&gt;scoping rules, we need to use a list so that it can be a &amp;quot;per-render global&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;that gets updated in place. Real globals are shared by all templates with the&lt;/span&gt;
&lt;span class="c"&gt;same environment, and variables defined in the macro don&amp;#39;t persist after the&lt;/span&gt;
&lt;span class="c"&gt;macro invocation ends.&lt;/span&gt;
&lt;span class="c"&gt;#}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;openssl_section_num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;macro&lt;/span&gt; &lt;span class="nv"&gt;section&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;sec&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;openssl_section_num&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;length&lt;/span&gt; -&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endset&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nv"&gt;openssl_section_num.append&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;contents&lt;/span&gt; &lt;span class="cp"&gt;%}{{&lt;/span&gt; &lt;span class="nv"&gt;caller&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;}}{%&lt;/span&gt; &lt;span class="k"&gt;endset&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;contents&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;sectiondata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;formatsection&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;contents&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nv"&gt;openssl_sections.append&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;sectiondata&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt; -&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endmacro&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;macro&lt;/span&gt; &lt;span class="nv"&gt;formatsection&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;contents&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;[ &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt; ]&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;contents&lt;/span&gt; -&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endmacro&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Thinking about templating for automatic CSR generation</title><link href="http://blog.benjaminlipton.com/2016/07/19/csr-generation-templating.html" rel="alternate"></link><published>2016-07-19T00:00:00-04:00</published><updated>2016-07-19T00:00:00-04:00</updated><author><name>Benjamin Lipton</name></author><id>tag:blog.benjaminlipton.com,2016-07-19:2016/07/19/csr-generation-templating.html</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#background"&gt;Background&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#requirements"&gt;Requirements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#implementations"&gt;Implementations&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#two-pass-data-interpolation"&gt;Two-pass data interpolation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#two-pass-template-interpolation"&gt;Two-pass template interpolation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#template-based-hierarchical-rules"&gt;Template-based hierarchical rules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#formatter-based-hierarchical-rules"&gt;Formatter-based hierarchical rules&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusions"&gt;Conclusions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="background"&gt;Background&lt;/h2&gt;
&lt;p&gt;I am working on a project
(&lt;a href="https://fedorahosted.org/freeipa/ticket/4899"&gt;ticket&lt;/a&gt;,
&lt;a href="http://www.freeipa.org/page/V4/Automatic_Certificate_Request_Generation"&gt;design&lt;/a&gt;)
to simplify creating certificates in FreeIPA.  Currently administrators must
generate a Certificate Signing Request (CSR) matching the type of certificate
they wish to issue. They submit this CSR to FreeIPA using the &lt;code&gt;ipa
cert-request&lt;/code&gt; command, and if all the specified fields match the data FreeIPA
has about the certificate subject, a cert will be issued. This seems a bit
silly; if FreeIPA has this information already, can't it automatically generate
a CSR with the correct data?&lt;/p&gt;
&lt;p&gt;However, different certificate applications require different data, so the
Certificate Profile (a concept from the Dogtag CA that specifies the fields in
the cert, constraints on their values, and how the final values should be
constructed) needs to contain information on how to transform the data in
FreeIPA into the fields of the certificate. Further, different administrators
may want to use different tools to manage their private keys, so we must be
able to communicate these certificate field values back in formats understood
by different utilities such as openssl and certutil. Those tools will be
responsible for generating the actual CSR from the provided configuration.&lt;/p&gt;
&lt;p&gt;As suggested in the
&lt;a href="http://www.freeipa.org/page/V4/Automatic_Certificate_Request_Generation/Mapping_Rules"&gt;Mapping Rules design&lt;/a&gt;,
the first implementation of this system used python to implement the low-level
formatting rules, such as &lt;em&gt;return the user's email address, prefixed by the
string 'email:'&lt;/em&gt;. However, it is a goal of this project to allow new rules to
be added at runtime, so these rules must be text-based rather than part of the
code. This post will try to imagine what the rules would look like if
implemented using the &lt;a href="http://jinja2.pocoo.org/"&gt;Jinja2&lt;/a&gt; templating language.&lt;/p&gt;
&lt;h3 id="requirements"&gt;Requirements&lt;/h3&gt;
&lt;p&gt;We must at a minimum be able to generate two different types of configuration,
the openssl config file:&lt;/p&gt;
&lt;p&gt;```
[ req ]
prompt = no
encrypt_key = no&lt;/p&gt;
&lt;p&gt;distinguished_name = dn
req_extensions = exts&lt;/p&gt;
&lt;p&gt;[ dn ]
O=DOMAIN.EXAMPLE.COM
CN=user&lt;/p&gt;
&lt;p&gt;[ exts ]
subjectAltName=@SAN&lt;/p&gt;
&lt;p&gt;[ SAN ]
email=user@example.com
dirName=SANdn&lt;/p&gt;
&lt;p&gt;[ SANdn ]
1.DC=com
2.DC=example
CN=users
UID=user
```&lt;/p&gt;
&lt;p&gt;and the certutil command line:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;certutil -R -a -s "CN=user,O=DOMAIN.EXAMPLE.COM" --extSAN "email:user@example.com,dn:UID=user;CN=users;DC=example;DC=com"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Some interesting things to note about these formats:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The contents of an extension can be constructed from multiple sources, such
  as an email address and a distinguished name.&lt;/li&gt;
&lt;li&gt;The openssl format is hierarchical. Some parameters, such as &lt;code&gt;req_extensions&lt;/code&gt;
  and &lt;code&gt;dirName&lt;/code&gt; always refer to the name of a new config section. Others can
  optionally refer to a config section using an &lt;code&gt;@&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In openssl, the certificate subject is created under the &lt;code&gt;[req]&lt;/code&gt; section,
  while extensions are created under their own section.&lt;/li&gt;
&lt;li&gt;Openssl has a quirky way of denoting distinguished names. They are ordered
  from least to most specific (opposite how LDAP presents them). And if two
  AVAs have the same attribute type, they must be prefixed with different
  strings ending in &lt;code&gt;.&lt;/code&gt; (or &lt;code&gt;:&lt;/code&gt; or &lt;code&gt;,&lt;/code&gt;) as the config file format will
  otherwise discard all but one.&lt;/li&gt;
&lt;li&gt;Certutil is also a bit quirky about distinguished names in the Subject Alt
  Name extension. Because the argument to the extSAN flag is comma-delimited,
  the components of the DN must be separated using a different delimiter, like
  a semicolon.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="implementations"&gt;Implementations&lt;/h2&gt;
&lt;h3 id="two-pass-data-interpolation"&gt;Two-pass data interpolation&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;((user data -&amp;gt; data rules) -&amp;gt; syntax rules) -&amp;gt; output&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;One way we can approach constructing one extension from multiple sources it to
use two sets of rules - one rule for each data item that provides a value for
the extension, and one rule specifying the name and syntax of the extension as
a whole. We evaulate the data rules first, then feed the values produced into
the associated syntax rules to get the final output for that extension.
Finally, the extension output is passed to the formatter, to produce the final
output. We wish to express the data and syntax rules using the templating
language, but the formatters (one for each CSR generation tool) will be
implemented as python classes.&lt;/p&gt;
&lt;p&gt;So how do we represent openssl sections in this scheme? The formatter needs to
accept input in a (very limited) markup language, which defines where the
sections are, what goes into them, and perhaps whether a given line should be
placed under &lt;code&gt;[req]&lt;/code&gt; or &lt;code&gt;[exts]&lt;/code&gt;. Even with the features of the formatter
markup very limited, it would still be possible for a user to accidentally or
intentionally inject some markup that would make it impossible to generate a
certificate for them. So, some kind of escaping is also needed, but it would be
jinja2 template markup escaping, not the HTML escaping that jinja2 already
supports.&lt;/p&gt;
&lt;p&gt;Example data rules:&lt;/p&gt;
&lt;p&gt;{% raw %}
&lt;code&gt;email={{subject.email}}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;O={{config.ipacertificatesubjectbase}}\nCN={{subject.username}}&lt;/code&gt;
{% endraw %}&lt;/p&gt;
&lt;p&gt;Example syntax rules:
{% raw %}
&lt;code&gt;--extSAN {{values|join(',')}}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;subjectAltName=@{{{% endraw %}{% raw %}'{% section %}'}}{{values|join('\n')}}{{{% endraw %}{% raw %}'{% endsection %}'}}&lt;/code&gt;
{% endraw %}&lt;/p&gt;
&lt;p&gt;That's a lot of braces! We have to escape the &lt;code&gt;section&lt;/code&gt; and &lt;code&gt;endsection&lt;/code&gt; tags
sequences so they will appear verbatim in the final template, producing
something like:&lt;/p&gt;
&lt;p&gt;{% raw %}
&lt;code&gt;subjectAltName=@{% section %}email={{subject.email}}
URI={{subject.inetuserhttpurl}}{% endsection %}&lt;/code&gt;
{% endraw %}
If we used a different type of markup for the user data interpolation and for
denoting sections, the escaping would not be necessary; however, we would still
need to preprocess the &lt;code&gt;values&lt;/code&gt; to escape any jinja2 markup that comes from the
user data, and we would still have two types of markup being used in parallel.&lt;/p&gt;
&lt;p&gt;Note, too, that the &lt;code&gt;section&lt;/code&gt; tag does not exist yet in jinja2; it would need
to be implemented as an extension.&lt;/p&gt;
&lt;h3 id="two-pass-template-interpolation"&gt;Two-pass template interpolation&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;(user data -&amp;gt; (data rules -&amp;gt; syntax rules)) -&amp;gt; output&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Alternatively, we can do the substitution on the templates themselves before
interpolating user data, building up one big template that we then render with
the data from the database. This is safer because the user-specified data never
gets interpreted as a template, so we don't have to worry about escaping the
user data or limiting the features of the template language. On the other hand,
this may be challenging for the rule writer, because one must keep in mind the
number of times a given rule will be run through the templating engine to get
the escaping correct. Data rules will be used as templates only once (consuming
user data) but syntax rules will be used as templates once to incorporate the
data rules into the templates, and then again when the user data is included.
Thus, any template tags relating to the processing of user data (such as, I
imagine, ones for specifying openssl sections) need to be escaped.&lt;/p&gt;
&lt;p&gt;Surprisingly, this hardly changes the way the rules are written! All of the
example rules given above would still be valid, but the &lt;code&gt;values&lt;/code&gt; would be the
data rules themselves rather than data rules with interpolated user data. And
of course, the &lt;code&gt;values&lt;/code&gt; would not be escaped beforehand.&lt;/p&gt;
&lt;h3 id="template-based-hierarchical-rules"&gt;Template-based hierarchical rules&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;user data -&amp;gt; collected rules -&amp;gt; output&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;One way to get away from escaping and multiple evaluations is to redesign the
template so that the order of its elements no longer matters. That is, the
hierarchical relationships between data items, certificate extensions, and the
CSR as a whole could be encoded using jinja2 tags. It's probably easiest to
explain this idea with an example:&lt;/p&gt;
&lt;p&gt;{% highlight jinja %}
{% raw %}
{% group req %}
{% entry req %}extensions={% group exts %}{% endentry %}
{% entry req %}distinguished_name={% group subjectDN %}{% endentry %}
{% entry subjectDN %}O={{config.ipacertificatesubjectbase}}\nCN={{subject.username}}{% endentry %}
{% entry exts %}subjectAltName=@{% group SAN %}{% endentry %}
{% entry SAN %}email={{subject.email}}{% endentry %}
{% entry SAN %}URI={{subject.inetuserhttpurl}}{% endentry %}
{% endraw %}
{% endhighlight %}&lt;/p&gt;
&lt;p&gt;The config for certutil would be quite similar:
{% highlight jinja %}
{% raw %}
certutil -R -a {% group opts %}
{% entry opts %}-s {% group subjectDN %}{% endentry %}
{% entry opts %}--extSAN {% group SAN %}{% endentry %}
{% entry subjectDN %}CN={{subject.username}},O={{config.ipacertificatesubjectbase}}{% endentry %}
{% entry SAN %}email:{{subject.email}}{% endentry %}
{% entry SAN %}uri:{{subject.inetuserhttpurl}}{% endentry %}
{% endraw %}
{% endhighlight %}&lt;/p&gt;
&lt;p&gt;Each CSR generation helper would have its own notion of "groups," which would
be implemented as jinja2 extensions. The entries of a group would be collected
and inserted into the group in whatever way was appropriate for that helper.
Each line of these templates would be either a cert mapping rule referenced in
the cert profile, or something built into the formatter for the CSR generation
helper. There would be no distinction between data rules and syntax rules, and
the order that rules appeared in the template would be irrelevant because the
tags specified the hierarchy.&lt;/p&gt;
&lt;p&gt;This approach has some downsides, too:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Section names are now specified in the rules, which means there could be
   conflicts between different rules, and that a rule can only ever be included
   in a particular section. If two sections need the same data, two different
   rules are needed.&lt;/li&gt;
&lt;li&gt;Some types of groups are formatted differently from others (e.g. in
   certutil, &lt;code&gt;opts&lt;/code&gt; is space-separated, while &lt;code&gt;SAN&lt;/code&gt; is comma-separated. It's
   not entirely clear where this should be encoded, and how.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Concern #1 is probably an ok tradeoff, as it's not clear how broadly reusable
rules will be anyway. However, #2 would need to be addressed in any actual
implementation.&lt;/p&gt;
&lt;h3 id="formatter-based-hierarchical-rules"&gt;Formatter-based hierarchical rules&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;user data -&amp;gt; low-level rule -&amp;gt; formatting code -&amp;gt; group objects
group objects -&amp;gt; higher-level rule -&amp;gt; formatting code -&amp;gt; group objects
...
group objects -&amp;gt; top-level rule -&amp;gt; output&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Instead of linking rules together into a hierarchy using tags, leaving it to
the templating engine to interpret that structure, we could encode the
structure in the rule entities themselves and use multiple evaluations to
handle the hierarchy in the formatter, before the data even gets to the
templating engine. Each rule would be stored with the name of the group within
which it should be rendered, as well as the names of any groups that the rule
includes. For example, to adapt the rule
&lt;code&gt;{% raw %}{% entry exts %}subjectAltName=@{% group SAN %}{% endentry %}{% endraw %}&lt;/code&gt;
to this schema, we would say that it is an element of the "exts" group,
and provides the "SAN" group. By linking up group elements to group providers,
we construct a tree of rules.&lt;/p&gt;
&lt;p&gt;The formatter would evaluate these rules beginning at the leaves and passing
the results of child nodes into variables in the parent node templates. The
formatter is responsible for determining what exactly gets passed into the
parent node, such as an object representing an openssl config section, or just
a list of formatted strings. Parent nodes decide how to present the passed
objects, such as by comma-separating the strings or referencing the name of the
section. This addresses concern #2 from the previous approach, because the
tools of the jinja2 language are now available for expressing how to format the
results of groups of rules.&lt;/p&gt;
&lt;p&gt;Example leaf rules:&lt;/p&gt;
&lt;p&gt;{% raw %}
&lt;code&gt;group: SAN
template: email={{subject.email}}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;group: subjectDN
template: O={{config.ipacertificatesubjectbase}}\nCN={{subject.username}}&lt;/code&gt;
{% endraw %}&lt;/p&gt;
&lt;p&gt;Example parent rules:
{% raw %}
&lt;code&gt;group: opts
groupProvided: SAN
template: --extSAN {{ SAN|join(',') }}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;group: exts
groupProvided: SAN
template: subjectAltName=@{{ SAN.section_name }}&lt;/code&gt;
{% endraw %}&lt;/p&gt;
&lt;p&gt;This has several advantages over the two-pass interpolation approaches:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Profiles are simpler to configure, because they just contain a list of
   references to rules rather than a structured list of groups of rules.&lt;/li&gt;
&lt;li&gt;Profiles are also simpler to implement, with no sub-objects in the database.&lt;/li&gt;
&lt;li&gt;It's no longer necessary to pay attention to escaping when writing rules.
   Each rule is used as a template exactly once, and complex structures are
   handled by the formatter code rather than template tags so tags don't need
   to be passed along.&lt;/li&gt;
&lt;li&gt;User data is never used as a template, which reduces the attack surface.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;However, there are also some potential concerns:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Whether the openssl and certutil hierarchies for rules are compatible (i.e.
   can the parent group can be listed in the mapping rule or must it be in the
   transformation rule?)&lt;/li&gt;
&lt;li&gt;Are there any instances where something needs to be a group but can't be its
   own openssl section? How would we convey this to the openssl formatter?&lt;/li&gt;
&lt;li&gt;Conversely, are there cases where we would want to be able to create a
   section without creating a new rule? For example, a DN in a subject
   alternative name needs to be its own section. Do we then need rules just for
   filling out parts of that DN?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="conclusions"&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;Although hierarchical rules seem like an interesting solution to avoid escaping
and simplify the configuration in the cert profile itself, I think the
interpolation approaches are easier to understand and explain, which is
valuable for this already unexpectedly-complex feature.&lt;/p&gt;
&lt;p&gt;Even though it is a little counter-intuitive, I lean towards the template
interpolation solution rather than the straightforward data interpolation one
because it doesn't incorporate user data until the last step.  This would make
it incompatible with the existing python-based rules, but those are going to be
replaced anyway, and in fact they may be vulnerable to injection attacks as
well. Escaping of tags that are to be interpreted by the formatter will still
be inconvenient, but we may be able to provide extensions to the template
language to make that easier.&lt;/p&gt;
&lt;p&gt;If you are interested in discussing any of these options, feel free to email me
directly at the address below, or share your thoughts with the
&lt;a href="https://www.redhat.com/mailman/listinfo/freeipa-devel"&gt;freeipa-devel mailing list&lt;/a&gt;.
Thanks!&lt;/p&gt;</summary></entry><entry><title>FreeIPA and the 'subdir-objects' option</title><link href="http://blog.benjaminlipton.com/2016/06/14/automake.html" rel="alternate"></link><published>2016-06-14T00:00:00-04:00</published><updated>2016-06-14T00:00:00-04:00</updated><author><name>Benjamin Lipton</name></author><id>tag:blog.benjaminlipton.com,2016-06-14:2016/06/14/automake.html</id><summary type="html">&lt;p&gt;The subject of this blog post will be
&lt;a href="https://fedorahosted.org/freeipa/ticket/5873"&gt;FreeIPA Ticket #5873&lt;/a&gt;, a request
to fix the warning messages produced when compiling FreeIPA:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;automake: warning: possible forward-incompatibility.
automake: At least a source file is in a subdirectory, but the &amp;#39;subdir-objects&amp;#39;
automake: automake option hasn&amp;#39;t been enabled.  For now, the corresponding output
automake: object file(s) will be placed in the top-level directory.  However,
automake: this behaviour will change in future Automake versions: they will
automake: unconditionally cause object files to be placed in the same subdirectory
automake: of the corresponding sources.
automake: You are advised to start using &amp;#39;subdir-objects&amp;#39; option throughout your
automake: project, to avoid future incompatibilities.
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="step-1-add-subdir-objects"&gt;Step 1: Add 'subdir-objects'&lt;/h2&gt;
&lt;p&gt;It says we should enable the &lt;code&gt;subdir-objects&lt;/code&gt; option, so let's try it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;diff --git a/client/configure.ac b/client/configure.ac&lt;/span&gt;
&lt;span class="gh"&gt;index 58f23af..a97edd1 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/client/configure.ac&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/client/configure.ac&lt;/span&gt;
&lt;span class="gu"&gt;@@ -8,7 +8,7 @@ LT_INIT&lt;/span&gt;
 AC_CONFIG_HEADERS([config.h])
 AC_CONFIG_SUBDIRS([../asn1])

&lt;span class="gd"&gt;-AM_INIT_AUTOMAKE([foreign])&lt;/span&gt;
&lt;span class="gi"&gt;+AM_INIT_AUTOMAKE([foreign subdir-objects])&lt;/span&gt;

 AM_MAINTAINER_MODE

&lt;span class="gh"&gt;diff --git a/daemons/configure.ac b/daemons/configure.ac&lt;/span&gt;
&lt;span class="gh"&gt;index 2906def..8dce469 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/daemons/configure.ac&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/daemons/configure.ac&lt;/span&gt;
&lt;span class="gu"&gt;@@ -7,7 +7,7 @@ AC_INIT([ipa-server],&lt;/span&gt;
 AC_CONFIG_HEADERS([config.h])
 AC_CONFIG_SUBDIRS([../asn1])

&lt;span class="gd"&gt;-AM_INIT_AUTOMAKE([foreign])&lt;/span&gt;
&lt;span class="gi"&gt;+AM_INIT_AUTOMAKE([foreign subdir-objects])&lt;/span&gt;
 m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES])

 AM_MAINTAINER_MODE
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And the result:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make[1]: Entering directory &amp;#39;/home/blipton/src/freeipa/dist/freeipa-4.3.90.201606021746GIT63b597d/client&amp;#39;
Makefile:704: ../util/.deps/ipa_krb5.Po: No such file or directory
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So what's happening here? If we search for the missing file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ find -name ipa_krb5.Po
./client/&lt;span class="k"&gt;$(&lt;/span&gt;KRB5_UTIL_DIR&lt;span class="k"&gt;)&lt;/span&gt;/.deps/ipa_krb5.Po
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;we see that it's in a very odd place, a directory literally named
&lt;code&gt;$(KRB5_UTIL_DIR)&lt;/code&gt;. It turns out this is a known issue with automatic
dependency tracking in automake, discussed extensively in
&lt;a href="http://debbugs.gnu.org/cgi/bugreport.cgi?bug=13928"&gt;this bug report&lt;/a&gt;.  Basically, the
config.status script (which generates Makefile from Makefile.in) is directly
parsing the makefile, looking for lines that include makefiles under
&lt;code&gt;$(DEPDIR)&lt;/code&gt;. It uses sed to replace &lt;code&gt;$(DEPDIR)&lt;/code&gt; with &lt;code&gt;.deps&lt;/code&gt;, but any other
variables in the line are taken verbatim. Therefore, if the SOURCES line from
which this is derived includes, say, &lt;code&gt;$(KRB5_UTIL_DIR)/ipa_krb5.c&lt;/code&gt;,
config.status ends up making the oddly-named directory mentioned above.&lt;/p&gt;
&lt;h2 id="step-2-no-variables-in-paths"&gt;Step 2: No variables in paths&lt;/h2&gt;
&lt;p&gt;Ok, so we can't use variable references in our SOURCES. What if we expand all the variables, like this?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;diff --git a/client/Makefile.am b/client/Makefile.am&lt;/span&gt;
&lt;span class="gh"&gt;index 3d135a3..3c9f4bb 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/client/Makefile.am&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/client/Makefile.am&lt;/span&gt;
&lt;span class="gu"&gt;@@ -13,7 +13,7 @@ endif&lt;/span&gt;
 export AM_CFLAGS

 KRB5_UTIL_DIR=../util
&lt;span class="gd"&gt;-KRB5_UTIL_SRCS=$(KRB5_UTIL_DIR)/ipa_krb5.c&lt;/span&gt;
&lt;span class="gi"&gt;+KRB5_UTIL_SRCS=../util/ipa_krb5.c&lt;/span&gt;
 ASN1_UTIL_DIR=../asn1
 IPA_CONF_FILE=$(sysconfdir)/ipa/default.conf

&lt;span class="gh"&gt;diff --git a/client/configure.ac b/client/configure.ac&lt;/span&gt;
&lt;span class="gh"&gt;index 58f23af..a97edd1 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/client/configure.ac&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/client/configure.ac&lt;/span&gt;
&lt;span class="gu"&gt;@@ -8,7 +8,7 @@ LT_INIT&lt;/span&gt;
 AC_CONFIG_HEADERS([config.h])
 AC_CONFIG_SUBDIRS([../asn1])

&lt;span class="gd"&gt;-AM_INIT_AUTOMAKE([foreign])&lt;/span&gt;
&lt;span class="gi"&gt;+AM_INIT_AUTOMAKE([foreign subdir-objects])&lt;/span&gt;

 AM_MAINTAINER_MODE

&lt;span class="gh"&gt;diff --git a/daemons/configure.ac b/daemons/configure.ac&lt;/span&gt;
&lt;span class="gh"&gt;index 2906def..8dce469 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/daemons/configure.ac&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/daemons/configure.ac&lt;/span&gt;
&lt;span class="gu"&gt;@@ -7,7 +7,7 @@ AC_INIT([ipa-server],&lt;/span&gt;
 AC_CONFIG_HEADERS([config.h])
 AC_CONFIG_SUBDIRS([../asn1])

&lt;span class="gd"&gt;-AM_INIT_AUTOMAKE([foreign])&lt;/span&gt;
&lt;span class="gi"&gt;+AM_INIT_AUTOMAKE([foreign subdir-objects])&lt;/span&gt;
 m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES])

 AM_MAINTAINER_MODE
&lt;span class="gh"&gt;diff --git a/daemons/ipa-kdb/Makefile.am b/daemons/ipa-kdb/Makefile.am&lt;/span&gt;
&lt;span class="gh"&gt;index a4ea366..a4a970a 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/daemons/ipa-kdb/Makefile.am&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/daemons/ipa-kdb/Makefile.am&lt;/span&gt;
&lt;span class="gu"&gt;@@ -2,8 +2,8 @@ NULL =&lt;/span&gt;

 KRB5_UTIL_DIR = ../../util
 IPA_UTIL_DIR = ../../../util
&lt;span class="gd"&gt;-KRB5_UTIL_SRCS = $(KRB5_UTIL_DIR)/ipa_krb5.c \&lt;/span&gt;
&lt;span class="gd"&gt;-        $(KRB5_UTIL_DIR)/ipa_pwd.c&lt;/span&gt;
&lt;span class="gi"&gt;+KRB5_UTIL_SRCS = ../../util/ipa_krb5.c \&lt;/span&gt;
&lt;span class="gi"&gt;+        ../../util/ipa_pwd.c&lt;/span&gt;

 AM_CPPFLAGS =                      \
    -I.                     \
&lt;span class="gh"&gt;diff --git a/daemons/ipa-sam/Makefile.am b/daemons/ipa-sam/Makefile.am&lt;/span&gt;
&lt;span class="gh"&gt;index ea14661..66ffdff 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/daemons/ipa-sam/Makefile.am&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/daemons/ipa-sam/Makefile.am&lt;/span&gt;
&lt;span class="gu"&gt;@@ -7,7 +7,7 @@ SAMBA40EXTRA_LIBS = $(SAMBA40EXTRA_LIBPATH) \&lt;/span&gt;
            $(NULL)

 KRB5_UTIL_DIR=../../util
&lt;span class="gd"&gt;-KRB5_UTIL_SRCS=$(KRB5_UTIL_DIR)/ipa_krb5.c $(KRB5_UTIL_DIR)/ipa_pwd_ntlm.c&lt;/span&gt;
&lt;span class="gi"&gt;+KRB5_UTIL_SRCS=../../util/ipa_krb5.c ../../util/ipa_pwd_ntlm.c&lt;/span&gt;
 ASN1_UTIL_DIR=../../asn1

 AM_CPPFLAGS =                      \
&lt;span class="gh"&gt;diff --git a/daemons/ipa-slapi-plugins/ipa-pwd-extop/Makefile.am b/daemons/ipa-slapi-plugins/ipa-pwd-extop/Makefile.am&lt;/span&gt;
&lt;span class="gh"&gt;index 46a6491..cf0ffbd 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/daemons/ipa-slapi-plugins/ipa-pwd-extop/Makefile.am&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/daemons/ipa-slapi-plugins/ipa-pwd-extop/Makefile.am&lt;/span&gt;
&lt;span class="gu"&gt;@@ -3,9 +3,9 @@ NULL =&lt;/span&gt;
 MAINTAINERCLEANFILES = *~ Makefile.in
 PLUGIN_COMMON_DIR = ../common
 KRB5_UTIL_DIR = ../../../util
&lt;span class="gd"&gt;-KRB5_UTIL_SRCS = $(KRB5_UTIL_DIR)/ipa_krb5.c \&lt;/span&gt;
&lt;span class="gd"&gt;-        $(KRB5_UTIL_DIR)/ipa_pwd.c \&lt;/span&gt;
&lt;span class="gd"&gt;-        $(KRB5_UTIL_DIR)/ipa_pwd_ntlm.c&lt;/span&gt;
&lt;span class="gi"&gt;+KRB5_UTIL_SRCS = ../../../util/ipa_krb5.c \&lt;/span&gt;
&lt;span class="gi"&gt;+        ../../../util/ipa_pwd.c \&lt;/span&gt;
&lt;span class="gi"&gt;+        ../../../util/ipa_pwd_ntlm.c&lt;/span&gt;
 ASN1_UTIL_DIR=../../../asn1

 AM_CPPFLAGS =                          \
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we have a different problem:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Making distclean in ipa-pwd-extop
make[3]: Entering directory &amp;#39;/home/blipton/src/freeipa/dist/freeipa-4.3.90.201606021827GIT4becc18/daemons/ipa-slapi-plugins/ipa-pwd-extop&amp;#39;
Makefile:535: ../../../util/.deps/ipa_krb5.Plo: No such file or directory
Makefile:536: ../../../util/.deps/ipa_pwd.Plo: No such file or directory
Makefile:537: ../../../util/.deps/ipa_pwd_ntlm.Plo: No such file or directory
make[3]: *** No rule to make target &amp;#39;../../../util/.deps/ipa_pwd_ntlm.Plo&amp;#39;.  Stop.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here it turns out that because &lt;code&gt;util/.deps&lt;/code&gt; is used by more than one Makefile in
the subdirectories of &lt;code&gt;daemons&lt;/code&gt;, it is being removed by &lt;code&gt;make distclean&lt;/code&gt; running
in the &lt;code&gt;daemons/ipa-kdb&lt;/code&gt; directory, and then once make reaches the
&lt;code&gt;daemons/ipa-slapi-plugins/ipa-pwd-extop&lt;/code&gt; directory the needed Plo files aren't
there anymore. There is a
&lt;a href="http://git.savannah.gnu.org/cgit/automake.git/commit/?id=08849db866b44510f6b8fd49e313c91a43a3dfd3"&gt;commit&lt;/a&gt;
that claims to fix this issue, but I'm not certain it will be ok with the same
file being referenced by multiple SOURCES directives, it's not included in any
released version of automake anyway. So, we're going to need to try something else.&lt;/p&gt;
&lt;h2 id="step-3-utils-gets-its-own-configure-file"&gt;Step 3: Utils gets its own configure file&lt;/h2&gt;
&lt;p&gt;It seems we're having issues because multiple projects want to build and clean
up the same files. So maybe it would be better to make utils its own project,
repsonsible for building the files within that directory, and simply have the
other projects depend on it. This is the same as what happens in the &lt;code&gt;asn1&lt;/code&gt;
directory of the source tree. The following patch implements this approach:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;diff --git a/Makefile b/Makefile&lt;/span&gt;
&lt;span class="gh"&gt;index 210b7ac..6e00220 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/Makefile&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/Makefile&lt;/span&gt;
&lt;span class="gu"&gt;@@ -3,7 +3,7 @@&lt;/span&gt;

 include VERSION

&lt;span class="gd"&gt;-SUBDIRS=asn1 daemons install ipapython ipalib&lt;/span&gt;
&lt;span class="gi"&gt;+SUBDIRS=util asn1 daemons install ipapython ipalib&lt;/span&gt;
 CLIENTDIRS=ipapython ipalib client asn1
 CLIENTPYDIRS=ipaclient ipaplatform

&lt;span class="gh"&gt;diff --git a/client/Makefile.am b/client/Makefile.am&lt;/span&gt;
&lt;span class="gh"&gt;index 3d135a3..afc2977 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/client/Makefile.am&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/client/Makefile.am&lt;/span&gt;
&lt;span class="gu"&gt;@@ -13,7 +13,7 @@ endif&lt;/span&gt;
 export AM_CFLAGS

 KRB5_UTIL_DIR=../util
&lt;span class="gd"&gt;-KRB5_UTIL_SRCS=$(KRB5_UTIL_DIR)/ipa_krb5.c&lt;/span&gt;
&lt;span class="gi"&gt;+KRB5_UTIL_LIBS=../util/ipa_krb5.la&lt;/span&gt;
 ASN1_UTIL_DIR=../asn1
 IPA_CONF_FILE=$(sysconfdir)/ipa/default.conf

&lt;span class="gu"&gt;@@ -52,7 +52,6 @@ sbin_SCRIPTS =            \&lt;/span&gt;
 ipa_getkeytab_SOURCES =        \
    ipa-getkeytab.c     \
    ipa-client-common.c \
&lt;span class="gd"&gt;-   $(KRB5_UTIL_SRCS)   \&lt;/span&gt;
    $(NULL)

 ipa_getkeytab_LDADD =      \
&lt;span class="gu"&gt;@@ -63,6 +62,7 @@ ipa_getkeytab_LDADD =         \&lt;/span&gt;
    $(POPT_LIBS)        \
    $(LIBINTL_LIBS)         \
    $(INI_LIBS)     \
&lt;span class="gi"&gt;+   $(KRB5_UTIL_LIBS)   \&lt;/span&gt;
    $(NULL)

 ipa_rmkeytab_SOURCES =     \
&lt;span class="gh"&gt;diff --git a/client/configure.ac b/client/configure.ac&lt;/span&gt;
&lt;span class="gh"&gt;index 58f23af..836cac4 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/client/configure.ac&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/client/configure.ac&lt;/span&gt;
&lt;span class="gu"&gt;@@ -6,9 +6,9 @@ AC_INIT([ipa-client],&lt;/span&gt;
 LT_INIT

 AC_CONFIG_HEADERS([config.h])
&lt;span class="gd"&gt;-AC_CONFIG_SUBDIRS([../asn1])&lt;/span&gt;
&lt;span class="gi"&gt;+AC_CONFIG_SUBDIRS([../util ../asn1])&lt;/span&gt;

&lt;span class="gd"&gt;-AM_INIT_AUTOMAKE([foreign])&lt;/span&gt;
&lt;span class="gi"&gt;+AM_INIT_AUTOMAKE([foreign subdir-objects])&lt;/span&gt;

 AM_MAINTAINER_MODE

&lt;span class="gh"&gt;diff --git a/daemons/configure.ac b/daemons/configure.ac&lt;/span&gt;
&lt;span class="gh"&gt;index 2906def..f27312f 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/daemons/configure.ac&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/daemons/configure.ac&lt;/span&gt;
&lt;span class="gu"&gt;@@ -5,9 +5,9 @@ AC_INIT([ipa-server],&lt;/span&gt;
         [https://hosted.fedoraproject.org/projects/freeipa/newticket])

 AC_CONFIG_HEADERS([config.h])
&lt;span class="gd"&gt;-AC_CONFIG_SUBDIRS([../asn1])&lt;/span&gt;
&lt;span class="gi"&gt;+AC_CONFIG_SUBDIRS([../util ../asn1])&lt;/span&gt;

&lt;span class="gd"&gt;-AM_INIT_AUTOMAKE([foreign])&lt;/span&gt;
&lt;span class="gi"&gt;+AM_INIT_AUTOMAKE([foreign subdir-objects])&lt;/span&gt;
 m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES])

 AM_MAINTAINER_MODE
&lt;span class="gh"&gt;diff --git a/daemons/ipa-kdb/Makefile.am b/daemons/ipa-kdb/Makefile.am&lt;/span&gt;
&lt;span class="gh"&gt;index a4ea366..2f8bcfb 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/daemons/ipa-kdb/Makefile.am&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/daemons/ipa-kdb/Makefile.am&lt;/span&gt;
&lt;span class="gu"&gt;@@ -2,8 +2,8 @@ NULL =&lt;/span&gt;

 KRB5_UTIL_DIR = ../../util
 IPA_UTIL_DIR = ../../../util
&lt;span class="gd"&gt;-KRB5_UTIL_SRCS = $(KRB5_UTIL_DIR)/ipa_krb5.c \&lt;/span&gt;
&lt;span class="gd"&gt;-        $(KRB5_UTIL_DIR)/ipa_pwd.c&lt;/span&gt;
&lt;span class="gi"&gt;+KRB5_UTIL_LIBS = ../../util/ipa_krb5.la \&lt;/span&gt;
&lt;span class="gi"&gt;+        ../../util/ipa_pwd.la&lt;/span&gt;

 AM_CPPFLAGS =                      \
    -I.                     \
&lt;span class="gu"&gt;@@ -39,7 +39,6 @@ ipadb_la_SOURCES =        \&lt;/span&gt;
    ipa_kdb_mspac.c     \
    ipa_kdb_delegation.c    \
    ipa_kdb_audit_as.c  \
&lt;span class="gd"&gt;-   $(KRB5_UTIL_SRCS)   \&lt;/span&gt;
    $(NULL)

 ipadb_la_LDFLAGS =         \
&lt;span class="gu"&gt;@@ -53,6 +52,7 @@ ipadb_la_LIBADD =         \&lt;/span&gt;
    $(NDRPAC_LIBS)      \
    $(UNISTRING_LIBS)   \
    $(NSS_LIBS)             \
&lt;span class="gi"&gt;+   $(KRB5_UTIL_LIBS)   \&lt;/span&gt;
    $(NULL)

 if HAVE_CMOCKA
&lt;span class="gu"&gt;@@ -71,7 +71,6 @@ ipa_kdb_tests_SOURCES =        \&lt;/span&gt;
        ipa_kdb_mspac.c         \
        ipa_kdb_delegation.c    \
        ipa_kdb_audit_as.c      \
&lt;span class="gd"&gt;-       $(KRB5_UTIL_SRCS)       \&lt;/span&gt;
        $(NULL)
 ipa_kdb_tests_CFLAGS = $(CMOCKA_CFLAGS)
 ipa_kdb_tests_LDADD =          \
&lt;span class="gu"&gt;@@ -81,6 +80,7 @@ ipa_kdb_tests_LDADD =          \&lt;/span&gt;
        $(NDRPAC_LIBS)          \
        $(UNISTRING_LIBS)       \
        $(NSS_LIBS)             \
&lt;span class="gi"&gt;+       $(KRB5_UTIL_LIBS)       \&lt;/span&gt;
        -lkdb5                  \
        -lsss_idmap             \
        $(NULL)
&lt;span class="gh"&gt;diff --git a/daemons/ipa-sam/Makefile.am b/daemons/ipa-sam/Makefile.am&lt;/span&gt;
&lt;span class="gh"&gt;index ea14661..17d77aa 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/daemons/ipa-sam/Makefile.am&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/daemons/ipa-sam/Makefile.am&lt;/span&gt;
&lt;span class="gu"&gt;@@ -7,7 +7,7 @@ SAMBA40EXTRA_LIBS = $(SAMBA40EXTRA_LIBPATH) \&lt;/span&gt;
            $(NULL)

 KRB5_UTIL_DIR=../../util
&lt;span class="gd"&gt;-KRB5_UTIL_SRCS=$(KRB5_UTIL_DIR)/ipa_krb5.c $(KRB5_UTIL_DIR)/ipa_pwd_ntlm.c&lt;/span&gt;
&lt;span class="gi"&gt;+KRB5_UTIL_LIBS=../../util/ipa_krb5.la ../../util/ipa_pwd_ntlm.la&lt;/span&gt;
 ASN1_UTIL_DIR=../../asn1

 AM_CPPFLAGS =                      \
&lt;span class="gu"&gt;@@ -39,7 +39,6 @@ plugin_LTLIBRARIES =      \&lt;/span&gt;

 ipasam_la_SOURCES =        \
    ipa_sam.c       \
&lt;span class="gd"&gt;-   $(KRB5_UTIL_SRCS)   \&lt;/span&gt;
    $(NULL)

 ipasam_la_LDFLAGS =        \
&lt;span class="gu"&gt;@@ -57,6 +56,7 @@ ipasam_la_LIBADD =        \&lt;/span&gt;
    $(SAMBA40EXTRA_LIBS)    \
    $(SSSIDMAP_LIBS)    \
    $(ASN1_UTIL_DIR)/libipaasn1.la  \
&lt;span class="gi"&gt;+   $(KRB5_UTIL_LIBS)   \&lt;/span&gt;
    $(NULL)

 EXTRA_DIST =           \
&lt;span class="gh"&gt;diff --git a/daemons/ipa-slapi-plugins/ipa-pwd-extop/Makefile.am b/daemons/ipa-slapi-plugins/ipa-pwd-extop/Makefile.am&lt;/span&gt;
&lt;span class="gh"&gt;index 46a6491..50c9c66 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/daemons/ipa-slapi-plugins/ipa-pwd-extop/Makefile.am&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/daemons/ipa-slapi-plugins/ipa-pwd-extop/Makefile.am&lt;/span&gt;
&lt;span class="gu"&gt;@@ -3,9 +3,9 @@ NULL =&lt;/span&gt;
 MAINTAINERCLEANFILES = *~ Makefile.in
 PLUGIN_COMMON_DIR = ../common
 KRB5_UTIL_DIR = ../../../util
&lt;span class="gd"&gt;-KRB5_UTIL_SRCS = $(KRB5_UTIL_DIR)/ipa_krb5.c \&lt;/span&gt;
&lt;span class="gd"&gt;-        $(KRB5_UTIL_DIR)/ipa_pwd.c \&lt;/span&gt;
&lt;span class="gd"&gt;-        $(KRB5_UTIL_DIR)/ipa_pwd_ntlm.c&lt;/span&gt;
&lt;span class="gi"&gt;+KRB5_UTIL_LIBS = ../../../util/ipa_krb5.la \&lt;/span&gt;
&lt;span class="gi"&gt;+        ../../../util/ipa_pwd.la \&lt;/span&gt;
&lt;span class="gi"&gt;+        ../../../util/ipa_pwd_ntlm.la&lt;/span&gt;
 ASN1_UTIL_DIR=../../../asn1

 AM_CPPFLAGS =                          \
&lt;span class="gu"&gt;@@ -41,6 +41,7 @@ plugin_LTLIBRARIES = libipa_pwd_extop.la&lt;/span&gt;
 libipa_pwd_extop_la_LIBADD  = \
    $(builddir)/../libotp/libotp.la \
    $(ASN1_UTIL_DIR)/libipaasn1.la  \
&lt;span class="gi"&gt;+   $(KRB5_UTIL_LIBS)       \&lt;/span&gt;
    $(NULL)
 libipa_pwd_extop_la_SOURCES =      \
    common.c            \
&lt;span class="gu"&gt;@@ -48,7 +49,6 @@ libipa_pwd_extop_la_SOURCES =         \&lt;/span&gt;
    prepost.c           \
    ipa_pwd_extop.c         \
    otpctrl.c           \
&lt;span class="gd"&gt;-   $(KRB5_UTIL_SRCS)       \&lt;/span&gt;
    $(NULL)

 appdir = $(IPA_DATA_DIR)
&lt;span class="gh"&gt;diff --git a/util/Makefile.am b/util/Makefile.am&lt;/span&gt;
new file mode 100644
&lt;span class="gh"&gt;index 0000000..a848a7c&lt;/span&gt;
&lt;span class="gd"&gt;--- /dev/null&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/util/Makefile.am&lt;/span&gt;
&lt;span class="gu"&gt;@@ -0,0 +1,8 @@&lt;/span&gt;
&lt;span class="gi"&gt;+#AM_CPPFLAGS = -I../util -Iasn1c&lt;/span&gt;
&lt;span class="gi"&gt;+&lt;/span&gt;
&lt;span class="gi"&gt;+noinst_LTLIBRARIES=libipa_krb5.la libipa_pwd.la libipa_pwd_ntlm.la&lt;/span&gt;
&lt;span class="gi"&gt;+noinst_HEADERS=ipa_krb5.h ipa_mspac.h ipa_pwd.h&lt;/span&gt;
&lt;span class="gi"&gt;+&lt;/span&gt;
&lt;span class="gi"&gt;+libipa_krb5_la_SOURCES=ipa_krb5.c&lt;/span&gt;
&lt;span class="gi"&gt;+libipa_pwd_la_SOURCES=ipa_pwd.c&lt;/span&gt;
&lt;span class="gi"&gt;+libipa_pwd_ntlm_la_SOURCES=ipa_pwd_ntlm.c&lt;/span&gt;
&lt;span class="gh"&gt;diff --git a/util/configure.ac b/util/configure.ac&lt;/span&gt;
new file mode 100644
&lt;span class="gh"&gt;index 0000000..2b323c1&lt;/span&gt;
&lt;span class="gd"&gt;--- /dev/null&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/util/configure.ac&lt;/span&gt;
&lt;span class="gu"&gt;@@ -0,0 +1,23 @@&lt;/span&gt;
&lt;span class="gi"&gt;+AC_PREREQ(2.59)&lt;/span&gt;
&lt;span class="gi"&gt;+m4_include(../version.m4)&lt;/span&gt;
&lt;span class="gi"&gt;+AC_INIT([ipa-server],&lt;/span&gt;
&lt;span class="gi"&gt;+        IPA_VERSION,&lt;/span&gt;
&lt;span class="gi"&gt;+        [https://hosted.fedoraproject.org/projects/freeipa/newticket])&lt;/span&gt;
&lt;span class="gi"&gt;+&lt;/span&gt;
&lt;span class="gi"&gt;+AC_CONFIG_HEADERS([config.h])&lt;/span&gt;
&lt;span class="gi"&gt;+AC_PROG_CC_C99&lt;/span&gt;
&lt;span class="gi"&gt;+LT_INIT&lt;/span&gt;
&lt;span class="gi"&gt;+&lt;/span&gt;
&lt;span class="gi"&gt;+AM_INIT_AUTOMAKE([foreign])&lt;/span&gt;
&lt;span class="gi"&gt;+&lt;/span&gt;
&lt;span class="gi"&gt;+AM_MAINTAINER_MODE&lt;/span&gt;
&lt;span class="gi"&gt;+&lt;/span&gt;
&lt;span class="gi"&gt;+AC_SUBST(VERSION)&lt;/span&gt;
&lt;span class="gi"&gt;+&lt;/span&gt;
&lt;span class="gi"&gt;+# Files&lt;/span&gt;
&lt;span class="gi"&gt;+&lt;/span&gt;
&lt;span class="gi"&gt;+AC_CONFIG_FILES([&lt;/span&gt;
&lt;span class="gi"&gt;+    Makefile&lt;/span&gt;
&lt;span class="gi"&gt;+])&lt;/span&gt;
&lt;span class="gi"&gt;+&lt;/span&gt;
&lt;span class="gi"&gt;+AC_OUTPUT&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But being its own project means that the utils directory is now responsible for
handling its own dependencies, which was previously done by the &lt;code&gt;configure.ac&lt;/code&gt;
files in the &lt;code&gt;client&lt;/code&gt; and &lt;code&gt;daemons&lt;/code&gt; directories. So with the simple
&lt;code&gt;utils/configure.ac&lt;/code&gt; file introduced by this patch, the build fails due to
missing dependencies:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;In file included from ipa_pwd_ntlm.c:30:0:
/usr/include/dirsrv/slapi-plugin.h:30:21: fatal error: prtypes.h: No such file or directory
compilation terminated.
Makefile:427: recipe for target &amp;#39;ipa_pwd_ntlm.lo&amp;#39; failed
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We might be able to make this work by copying the necessary dependencies into
the new configure.ac file. However, adding the maintenance burden of another
configure script seems undesirable, so let's see if we can take advantage of
the work that's already being done by the existing configure scripts.&lt;/p&gt;
&lt;h2 id="step-4-old-configure-new-makefile"&gt;Step 4: Old configure, new makefile&lt;/h2&gt;
&lt;p&gt;Configure scripts can generate more than one Makefile by adjusting the
&lt;code&gt;AC_CONFIG_FILES&lt;/code&gt; definition within &lt;code&gt;configure.ac&lt;/code&gt;. So instead of giving
&lt;code&gt;utils&lt;/code&gt; its own configure script, what if we just make the packages that need
it responsible for generating its Makefile themselves? The following patch does
this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;diff --git a/Makefile b/Makefile&lt;/span&gt;
&lt;span class="gh"&gt;index 210b7ac..6e00220 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/Makefile&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/Makefile&lt;/span&gt;
&lt;span class="gu"&gt;@@ -3,7 +3,7 @@&lt;/span&gt;

 include VERSION

&lt;span class="gd"&gt;-SUBDIRS=asn1 daemons install ipapython ipalib&lt;/span&gt;
&lt;span class="gi"&gt;+SUBDIRS=util asn1 daemons install ipapython ipalib&lt;/span&gt;
 CLIENTDIRS=ipapython ipalib client asn1
 CLIENTPYDIRS=ipaclient ipaplatform

&lt;span class="gh"&gt;diff --git a/client/Makefile.am b/client/Makefile.am&lt;/span&gt;
&lt;span class="gh"&gt;index 3d135a3..afc2977 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/client/Makefile.am&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/client/Makefile.am&lt;/span&gt;
&lt;span class="gu"&gt;@@ -13,7 +13,7 @@ endif&lt;/span&gt;
 export AM_CFLAGS

 KRB5_UTIL_DIR=../util
&lt;span class="gd"&gt;-KRB5_UTIL_SRCS=$(KRB5_UTIL_DIR)/ipa_krb5.c&lt;/span&gt;
&lt;span class="gi"&gt;+KRB5_UTIL_LIBS=../util/ipa_krb5.la&lt;/span&gt;
 ASN1_UTIL_DIR=../asn1
 IPA_CONF_FILE=$(sysconfdir)/ipa/default.conf

&lt;span class="gu"&gt;@@ -52,7 +52,6 @@ sbin_SCRIPTS =            \&lt;/span&gt;
 ipa_getkeytab_SOURCES =        \
    ipa-getkeytab.c     \
    ipa-client-common.c \
&lt;span class="gd"&gt;-   $(KRB5_UTIL_SRCS)   \&lt;/span&gt;
    $(NULL)

 ipa_getkeytab_LDADD =      \
&lt;span class="gu"&gt;@@ -63,6 +62,7 @@ ipa_getkeytab_LDADD =         \&lt;/span&gt;
    $(POPT_LIBS)        \
    $(LIBINTL_LIBS)         \
    $(INI_LIBS)     \
&lt;span class="gi"&gt;+   $(KRB5_UTIL_LIBS)   \&lt;/span&gt;
    $(NULL)

 ipa_rmkeytab_SOURCES =     \
&lt;span class="gh"&gt;diff --git a/client/configure.ac b/client/configure.ac&lt;/span&gt;
&lt;span class="gh"&gt;index 58f23af..4ca9caf 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/client/configure.ac&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/client/configure.ac&lt;/span&gt;
&lt;span class="gu"&gt;@@ -8,7 +8,7 @@ LT_INIT&lt;/span&gt;
 AC_CONFIG_HEADERS([config.h])
 AC_CONFIG_SUBDIRS([../asn1])

&lt;span class="gd"&gt;-AM_INIT_AUTOMAKE([foreign])&lt;/span&gt;
&lt;span class="gi"&gt;+AM_INIT_AUTOMAKE([foreign subdir-objects])&lt;/span&gt;

 AM_MAINTAINER_MODE

&lt;span class="gu"&gt;@@ -220,6 +220,7 @@ dnl ---------------------------------------------------------------------------&lt;/span&gt;

 AC_CONFIG_FILES([
     Makefile
&lt;span class="gi"&gt;+    ../util/Makefile&lt;/span&gt;
     ../asn1/Makefile
     man/Makefile
 ])
&lt;span class="gh"&gt;diff --git a/daemons/configure.ac b/daemons/configure.ac&lt;/span&gt;
&lt;span class="gh"&gt;index 2906def..761c15c 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/daemons/configure.ac&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/daemons/configure.ac&lt;/span&gt;
&lt;span class="gu"&gt;@@ -7,7 +7,7 @@ AC_INIT([ipa-server],&lt;/span&gt;
 AC_CONFIG_HEADERS([config.h])
 AC_CONFIG_SUBDIRS([../asn1])

&lt;span class="gd"&gt;-AM_INIT_AUTOMAKE([foreign])&lt;/span&gt;
&lt;span class="gi"&gt;+AM_INIT_AUTOMAKE([foreign subdir-objects])&lt;/span&gt;
 m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES])

 AM_MAINTAINER_MODE
&lt;span class="gu"&gt;@@ -332,6 +332,7 @@ AC_SUBST(LDFLAGS)&lt;/span&gt;
 AC_CONFIG_FILES([
     Makefile
     ../asn1/Makefile
&lt;span class="gi"&gt;+    ../util/Makefile&lt;/span&gt;
     ipa-kdb/Makefile
     ipa-sam/Makefile
     ipa-otpd/Makefile
&lt;span class="gh"&gt;diff --git a/daemons/ipa-kdb/Makefile.am b/daemons/ipa-kdb/Makefile.am&lt;/span&gt;
&lt;span class="gh"&gt;index a4ea366..2f8bcfb 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/daemons/ipa-kdb/Makefile.am&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/daemons/ipa-kdb/Makefile.am&lt;/span&gt;
&lt;span class="gu"&gt;@@ -2,8 +2,8 @@ NULL =&lt;/span&gt;

 KRB5_UTIL_DIR = ../../util
 IPA_UTIL_DIR = ../../../util
&lt;span class="gd"&gt;-KRB5_UTIL_SRCS = $(KRB5_UTIL_DIR)/ipa_krb5.c \&lt;/span&gt;
&lt;span class="gd"&gt;-        $(KRB5_UTIL_DIR)/ipa_pwd.c&lt;/span&gt;
&lt;span class="gi"&gt;+KRB5_UTIL_LIBS = ../../util/ipa_krb5.la \&lt;/span&gt;
&lt;span class="gi"&gt;+        ../../util/ipa_pwd.la&lt;/span&gt;

 AM_CPPFLAGS =                      \
    -I.                     \
&lt;span class="gu"&gt;@@ -39,7 +39,6 @@ ipadb_la_SOURCES =        \&lt;/span&gt;
    ipa_kdb_mspac.c     \
    ipa_kdb_delegation.c    \
    ipa_kdb_audit_as.c  \
&lt;span class="gd"&gt;-   $(KRB5_UTIL_SRCS)   \&lt;/span&gt;
    $(NULL)

 ipadb_la_LDFLAGS =         \
&lt;span class="gu"&gt;@@ -53,6 +52,7 @@ ipadb_la_LIBADD =         \&lt;/span&gt;
    $(NDRPAC_LIBS)      \
    $(UNISTRING_LIBS)   \
    $(NSS_LIBS)             \
&lt;span class="gi"&gt;+   $(KRB5_UTIL_LIBS)   \&lt;/span&gt;
    $(NULL)

 if HAVE_CMOCKA
&lt;span class="gu"&gt;@@ -71,7 +71,6 @@ ipa_kdb_tests_SOURCES =        \&lt;/span&gt;
        ipa_kdb_mspac.c         \
        ipa_kdb_delegation.c    \
        ipa_kdb_audit_as.c      \
&lt;span class="gd"&gt;-       $(KRB5_UTIL_SRCS)       \&lt;/span&gt;
        $(NULL)
 ipa_kdb_tests_CFLAGS = $(CMOCKA_CFLAGS)
 ipa_kdb_tests_LDADD =          \
&lt;span class="gu"&gt;@@ -81,6 +80,7 @@ ipa_kdb_tests_LDADD =          \&lt;/span&gt;
        $(NDRPAC_LIBS)          \
        $(UNISTRING_LIBS)       \
        $(NSS_LIBS)             \
&lt;span class="gi"&gt;+       $(KRB5_UTIL_LIBS)       \&lt;/span&gt;
        -lkdb5                  \
        -lsss_idmap             \
        $(NULL)
&lt;span class="gh"&gt;diff --git a/daemons/ipa-sam/Makefile.am b/daemons/ipa-sam/Makefile.am&lt;/span&gt;
&lt;span class="gh"&gt;index ea14661..17d77aa 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/daemons/ipa-sam/Makefile.am&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/daemons/ipa-sam/Makefile.am&lt;/span&gt;
&lt;span class="gu"&gt;@@ -7,7 +7,7 @@ SAMBA40EXTRA_LIBS = $(SAMBA40EXTRA_LIBPATH) \&lt;/span&gt;
            $(NULL)

 KRB5_UTIL_DIR=../../util
&lt;span class="gd"&gt;-KRB5_UTIL_SRCS=$(KRB5_UTIL_DIR)/ipa_krb5.c $(KRB5_UTIL_DIR)/ipa_pwd_ntlm.c&lt;/span&gt;
&lt;span class="gi"&gt;+KRB5_UTIL_LIBS=../../util/ipa_krb5.la ../../util/ipa_pwd_ntlm.la&lt;/span&gt;
 ASN1_UTIL_DIR=../../asn1

 AM_CPPFLAGS =                      \
&lt;span class="gu"&gt;@@ -39,7 +39,6 @@ plugin_LTLIBRARIES =      \&lt;/span&gt;

 ipasam_la_SOURCES =        \
    ipa_sam.c       \
&lt;span class="gd"&gt;-   $(KRB5_UTIL_SRCS)   \&lt;/span&gt;
    $(NULL)

 ipasam_la_LDFLAGS =        \
&lt;span class="gu"&gt;@@ -57,6 +56,7 @@ ipasam_la_LIBADD =        \&lt;/span&gt;
    $(SAMBA40EXTRA_LIBS)    \
    $(SSSIDMAP_LIBS)    \
    $(ASN1_UTIL_DIR)/libipaasn1.la  \
&lt;span class="gi"&gt;+   $(KRB5_UTIL_LIBS)   \&lt;/span&gt;
    $(NULL)

 EXTRA_DIST =           \
&lt;span class="gh"&gt;diff --git a/daemons/ipa-slapi-plugins/ipa-pwd-extop/Makefile.am b/daemons/ipa-slapi-plugins/ipa-pwd-extop/Makefile.am&lt;/span&gt;
&lt;span class="gh"&gt;index 46a6491..50c9c66 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/daemons/ipa-slapi-plugins/ipa-pwd-extop/Makefile.am&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/daemons/ipa-slapi-plugins/ipa-pwd-extop/Makefile.am&lt;/span&gt;
&lt;span class="gu"&gt;@@ -3,9 +3,9 @@ NULL =&lt;/span&gt;
 MAINTAINERCLEANFILES = *~ Makefile.in
 PLUGIN_COMMON_DIR = ../common
 KRB5_UTIL_DIR = ../../../util
&lt;span class="gd"&gt;-KRB5_UTIL_SRCS = $(KRB5_UTIL_DIR)/ipa_krb5.c \&lt;/span&gt;
&lt;span class="gd"&gt;-        $(KRB5_UTIL_DIR)/ipa_pwd.c \&lt;/span&gt;
&lt;span class="gd"&gt;-        $(KRB5_UTIL_DIR)/ipa_pwd_ntlm.c&lt;/span&gt;
&lt;span class="gi"&gt;+KRB5_UTIL_LIBS = ../../../util/ipa_krb5.la \&lt;/span&gt;
&lt;span class="gi"&gt;+        ../../../util/ipa_pwd.la \&lt;/span&gt;
&lt;span class="gi"&gt;+        ../../../util/ipa_pwd_ntlm.la&lt;/span&gt;
 ASN1_UTIL_DIR=../../../asn1

 AM_CPPFLAGS =                          \
&lt;span class="gu"&gt;@@ -41,6 +41,7 @@ plugin_LTLIBRARIES = libipa_pwd_extop.la&lt;/span&gt;
 libipa_pwd_extop_la_LIBADD  = \
    $(builddir)/../libotp/libotp.la \
    $(ASN1_UTIL_DIR)/libipaasn1.la  \
&lt;span class="gi"&gt;+   $(KRB5_UTIL_LIBS)       \&lt;/span&gt;
    $(NULL)
 libipa_pwd_extop_la_SOURCES =      \
    common.c            \
&lt;span class="gu"&gt;@@ -48,7 +49,6 @@ libipa_pwd_extop_la_SOURCES =         \&lt;/span&gt;
    prepost.c           \
    ipa_pwd_extop.c         \
    otpctrl.c           \
&lt;span class="gd"&gt;-   $(KRB5_UTIL_SRCS)       \&lt;/span&gt;
    $(NULL)

 appdir = $(IPA_DATA_DIR)
&lt;span class="gh"&gt;diff --git a/util/Makefile.am b/util/Makefile.am&lt;/span&gt;
new file mode 100644
&lt;span class="gh"&gt;index 0000000..a848a7c&lt;/span&gt;
&lt;span class="gd"&gt;--- /dev/null&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/util/Makefile.am&lt;/span&gt;
&lt;span class="gu"&gt;@@ -0,0 +1,8 @@&lt;/span&gt;
&lt;span class="gi"&gt;+#AM_CPPFLAGS = -I../util -Iasn1c&lt;/span&gt;
&lt;span class="gi"&gt;+&lt;/span&gt;
&lt;span class="gi"&gt;+noinst_LTLIBRARIES=libipa_krb5.la libipa_pwd.la libipa_pwd_ntlm.la&lt;/span&gt;
&lt;span class="gi"&gt;+noinst_HEADERS=ipa_krb5.h ipa_mspac.h ipa_pwd.h&lt;/span&gt;
&lt;span class="gi"&gt;+&lt;/span&gt;
&lt;span class="gi"&gt;+libipa_krb5_la_SOURCES=ipa_krb5.c&lt;/span&gt;
&lt;span class="gi"&gt;+libipa_pwd_la_SOURCES=ipa_pwd.c&lt;/span&gt;
&lt;span class="gi"&gt;+libipa_pwd_ntlm_la_SOURCES=ipa_pwd_ntlm.c&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But this ends badly too:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make[2]: Entering directory &amp;#39;/home/blipton/src/freeipa/rpmbuild/BUILD/freeipa-4.3.90.201606132126GIT475c6bc/util&amp;#39;
cd ../.. &amp;amp;&amp;amp; make  am--refresh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice that make is trying to change to a directory outside of the build
directory. No surprise that it doesn't find a Makefile there. What's going on?&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;cd&lt;/code&gt; is triggered by one of several makefile lines that run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;top_builddir&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;MAKE&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;AM_MAKEFLAGS&lt;span class="k"&gt;)&lt;/span&gt; am--refresh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and in the same Makefile, &lt;code&gt;top_builddir&lt;/code&gt; is defined to be &lt;code&gt;../..&lt;/code&gt;. Since this
build is actually taking place in the &lt;code&gt;client&lt;/code&gt; subdirectory, the correct
relative path would be &lt;code&gt;../client&lt;/code&gt;. But if we look at the code in
config.status, we see:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;ac_dir_suffix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nv"&gt;$as_echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$ac_dir&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s|^\.[\\/]||&amp;#39;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="c1"&gt;# A &amp;quot;..&amp;quot; for each directory in $ac_dir_suffix.&lt;/span&gt;
&lt;span class="nv"&gt;ac_top_builddir_sub&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nv"&gt;$as_echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$ac_dir_suffix&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s|/[^\\/]*|/..|g;s|/||&amp;#39;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As the comment says, this looks at the relative path from the configure script
to the Makefile (in this case &lt;code&gt;../util/Makefile&lt;/code&gt;), and replaces each directory
component with &lt;code&gt;..&lt;/code&gt;. This makes sense when the Makefile is within the same
source tree (i.e. when the Makefile is "two levels deep", the path should be
&lt;code&gt;../..&lt;/code&gt;) but with the Makefile external to the configure tree, it doesn't work
at all. Since this code is directly generated by automake, there doesn't seem
to be much we can do about this bad behavior.&lt;/p&gt;
&lt;h2 id="step-n-do-we-really-need-to-fix-this-now"&gt;Step N: do we really need to fix this now?&lt;/h2&gt;
&lt;p&gt;One interesting option to consider would be to replace these relative paths
with absolute ones based on one of the variables defined in the Makefile
automatically, such as &lt;code&gt;$(top_srcdir)&lt;/code&gt;. It is possible that the logic in
config.status would handle these paths better as they wouldn't include any
&lt;code&gt;..&lt;/code&gt;. However, thanks to the bug discussed way back in Step 1, variable
references in SOURCES don't work correctly! So that's probably no help either.&lt;/p&gt;
&lt;p&gt;According to &lt;a href="http://lists.gnu.org/archive/html/automake/2014-04/msg00004.html"&gt;a message on the automake mailing
list&lt;/a&gt;, this
bug is being considered a blocker for the release of automake 2.0, so despite
the scary compatibility warning in the output, we shouldn't be forced to use
&lt;code&gt;subdir-objects&lt;/code&gt; until the handling of it is fixed. In fact, there are patches
in the automake repository that are supposed to fix the bug, but the last
automake release was over a year ago, so no distros are using those patches and
I haven't tested against them. Since there seems to be no good way to add this
option until automake 1.16, and not having the option won't break anything
until automake 2.0, it may be easiest to just leave it alone for now.&lt;/p&gt;</summary></entry><entry><title>Manually requesting certs from Dogtag with certmonger debug tools</title><link href="http://blog.benjaminlipton.com/2016/06/12/dogtag-requests.html" rel="alternate"></link><published>2016-06-12T00:00:00-04:00</published><updated>2016-06-12T00:00:00-04:00</updated><author><name>Benjamin Lipton</name></author><id>tag:blog.benjaminlipton.com,2016-06-12:2016/06/12/dogtag-requests.html</id><summary type="html">&lt;p&gt;This post records the results some experimentation with the Dogtag API. Specifically, we will show how to authenticate against the API using credentials that are automatically generated by FreeIPA installation, how to use debug tools distributed with certmonger to issue certificates via the API, and a method of tweaking the created cert via the API parameters passed.&lt;/p&gt;
&lt;h2 id="acquiring-the-tool"&gt;Acquiring the tool&lt;/h2&gt;
&lt;p&gt;We will be using the &lt;code&gt;submit-d&lt;/code&gt; tool, included in the certmonger source distribution but not the binary packages. First we download the source and build it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone git://git.fedorahosted.org/git/certmonger.git
$ &lt;span class="nb"&gt;cd&lt;/span&gt; certmonger
$ sudo dnf install dbus-devel gettext-devel libidn-devel
$ ./autogen.sh
$ make
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="authentication-setup"&gt;Authentication setup&lt;/h2&gt;
&lt;p&gt;FreeIPA uses a client certificate stored in the NSS database &lt;code&gt;/etc/httpd/alias&lt;/code&gt; to authenticate to Dogtag. Unfortunately, this database uses the older DBM format, while the tool we will be using requires the newer SQLite format. So first we must create a new database and copy the cert we need into it, via a PKCS12 file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir /tmp/certs
certutil -N -d sql:/tmp/certs
sudo pk12util -o ipaCert.p12 -n ipaCert -d /etc/httpd/alias -k /etc/httpd/alias/pwdfile.txt
sudo pk12util -i ipaCert.p12 -n ipaCert -d sql:/tmp/certs
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At all password prompts, hit enter. We now have two certs in the file - &lt;code&gt;ipaCert&lt;/code&gt;, the client cert we will use for authentication, and the CA cert that signs all of the certs issued by FreeIPA:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[admin@vm-166 certs]$ certutil -L -d sql:/tmp/certs

Certificate Nickname                                         Trust Attributes
                                                             SSL,S/MIME,JAR/XPI

ipaCert                                                      u,u,u
DOMAIN.EXAMPLE.COM IPA CA                                    ,,
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mark the CA cert as trusted, otherwise the client will refuse to talk to the server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;certutil -M -t TC,, -d sql:/tmp/certs -n &lt;span class="s1"&gt;&amp;#39;DOMAIN.EXAMPLE.COM IPA CA&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="making-requests"&gt;Making requests&lt;/h2&gt;
&lt;p&gt;Generate a keypair and a CSR to submit to the CA. The &lt;code&gt;openssl req&lt;/code&gt; command will prompt for the certificate subject; fill it out however you like.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ openssl genrsa -out test.key
$ openssl req -new -key /tmp/certs/test.key -out /tmp/certs/test.req
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Use the &lt;code&gt;submit-d&lt;/code&gt; tool to submit the request to Dogtag. If we use the &lt;code&gt;caIPAserviceCert&lt;/code&gt; template, the request goes through immediately and we are presented with a certificate:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ src/submit-d -u https://server.example.com:8443/ca/ee/ca -U https://server.example.com:8443/ca/agent/ca &lt;span class="se"&gt;\&lt;/span&gt;
    -vv -d /tmp/certs -C ipaCert -a -T caIPAserviceCert -s /tmp/certs/test.req
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can see from the output that the tool makes a POST request to the &lt;code&gt;profileSubmit&lt;/code&gt; endpoint of the server.&lt;/p&gt;
&lt;p&gt;On the other hand, if we use a non-IPA cert such as &lt;code&gt;caServerCert&lt;/code&gt;, the tool makes the same call but the request will be deferred until approved:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ src/submit-d -u https://server.example.com:8443/ca/ee/ca -U https://server.example.com:8443/ca/agent/ca &lt;span class="se"&gt;\&lt;/span&gt;
    -vv -d /tmp/certs -C ipaCert -a -T caServerCert -s /tmp/certs/test.req
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this case, a &lt;code&gt;requestId&lt;/code&gt; is provided; we will use this to approve the request:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;result = &amp;quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;no&amp;quot;?&amp;gt;&amp;lt;XMLResponse&amp;gt;&amp;lt;Status&amp;gt;2&amp;lt;/Status&amp;gt;&amp;lt;Error&amp;gt;Request Deferred - {0}&amp;lt;/Error&amp;gt;&amp;lt;RequestId&amp;gt;  31&amp;lt;/RequestId&amp;gt;&amp;lt;/XMLResponse&amp;gt;&amp;quot;
error: Request Deferred - {0}
status: 2
requestId: 31
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can approve the request with the &lt;code&gt;-A&lt;/code&gt; flag and receive the certificate:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ src/submit-d -u https://server.example.com:8443/ca/ee/ca -U https://server.example.com:8443/ca/agent/ca &lt;span class="se"&gt;\&lt;/span&gt;
    -vv -d /tmp/certs -C ipaCert -a -T caServerCert -A 31
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="tweaking-certificate-parameters"&gt;Tweaking certificate parameters&lt;/h2&gt;
&lt;p&gt;If we look through the output of the approval command run above, we see a call to the &lt;code&gt;profileProcess&lt;/code&gt; endpoint on the Dogtag server. Interestingly, this call includes many of the parameters of the certificate:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;GET /ca/agent/ca/profileProcess?requestId=31&amp;amp;op=approve&amp;amp;xml=true&amp;amp;name=CN%3Dserver.example.com%2CO%3DDOMAIN.EXAMPLE.COM&amp;amp;notBefore=2016-06-13+02%3A50%3A46&amp;amp;notAfter=2018-06-03+02%3A50%3A46&amp;amp;authInfoAccessCritical=false&amp;amp;authInfoAccessGeneralNames=Record+%230%0AMethod%3A1.3.6.1.5.5.7.48.1%0ALocation+Type%3AURIName%0ALocation%3Ahttp%3A%2F%2Fserver.example.com%3A80%2Fca%2Focsp%0AEnable%3Atrue&amp;amp;keyUsageCritical=true&amp;amp;keyUsageDigitalSignature=true&amp;amp;keyUsageNonRepudiation=true&amp;amp;keyUsageKeyEncipherment=true&amp;amp;keyUsageDataEncipherment=true&amp;amp;keyUsageKeyAgreement=false&amp;amp;keyUsageKeyCertSign=false&amp;amp;keyUsageCrlSign=false&amp;amp;keyUsageEncipherOnly=false&amp;amp;keyUsageDecipherOnly=false&amp;amp;exKeyUsageCritical=false&amp;amp;exKeyUsageOIDs=1.3.6.1.5.5.7.3.1%2C1.3.6.1.5.5.7.3.2&amp;amp;signingAlg=SHA256withRSA HTTP/1.1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The tool gets these parameters by parsing the output of a call to the &lt;code&gt;profileReview&lt;/code&gt; endpoint. However, we will just re-use the same values, making a small modification to the &lt;code&gt;name&lt;/code&gt; parameter.
What happens if we submit the request again, and then approve it with the modified parameters?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;src/submit-d -u https://server.example.com:8443/ca/ee/ca -U https://server.example.com:8443/ca/agent/ca &lt;span class="se"&gt;\&lt;/span&gt;
    -vv -d /tmp/certs -C ipaCert -a -T caServerCert -A &lt;span class="m"&gt;32&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    -V &lt;span class="s1"&gt;&amp;#39;name=CN%3Dnewname%2CO%3DEXAMPLE.COM&amp;amp;notBefore=2016-06-13+02%3A50%3A46&amp;amp;notAfter=2018-06-03+02%3A50%3A46&amp;amp;authInfoAccessCritical=false&amp;amp;authInfoAccessGeneralNames=Record+%230%0AMethod%3A1.3.6.1.5.5.7.48.1%0ALocation+Type%3AURIName%0ALocation%3Ahttp%3A%2F%2Fserver.example.com%3A80%2Fca%2Focsp%0AEnable%3Atrue&amp;amp;keyUsageCritical=true&amp;amp;keyUsageDigitalSignature=true&amp;amp;keyUsageNonRepudiation=true&amp;amp;keyUsageKeyEncipherment=true&amp;amp;keyUsageDataEncipherment=true&amp;amp;keyUsageKeyAgreement=false&amp;amp;keyUsageKeyCertSign=false&amp;amp;keyUsageCrlSign=false&amp;amp;keyUsageEncipherOnly=false&amp;amp;keyUsageDecipherOnly=false&amp;amp;exKeyUsageCritical=false&amp;amp;exKeyUsageOIDs=1.3.6.1.5.5.7.3.1%2C1.3.6.1.5.5.7.3.2&amp;amp;signingAlg=SHA256withRSA&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Our new name shows up in the certificate!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Certificate:
    Data:
        Version:  v3
        Serial Number: 0x1E
        Signature Algorithm: SHA256withRSA - 1.2.840.113549.1.1.11
        Issuer: CN=Certificate Authority,O=DOMAIN.EXAMPLE.COM
        Validity:
            Not Before: Monday, June 13, 2016 2:50:46 AM GMT
            Not  After: Sunday, June 3, 2018 2:50:46 AM GMT
        Subject: CN=newname,O=EXAMPLE.COM
&lt;/pre&gt;&lt;/div&gt;</summary></entry></feed>